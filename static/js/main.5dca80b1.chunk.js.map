{"version":3,"sources":["components/ImageCard/index.js","components/Header/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","id","src","image","onClick","handleClicked","Header","score","topScore","Wrapper","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","console","log","clickedImage","state","imageCards","filter","allClickedImages","clicked","forEach","setState","bind","assertThisInitialized","_this2","components_Wrapper","components_Header","map","components_ImageCard","key","checkifClicked","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"y6BAqBeA,MAlBf,SAAmBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAK,iBAAmBL,EAAMM,GAC9BC,IAAKP,EAAMQ,MACXC,QAAU,kBAAMT,EAAMU,cAAcV,EAAMM,kBCQzCK,MAjBf,SAAgBX,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,2BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACXH,EAAAC,EAAAC,cAAA,0HACuCF,EAAAC,EAAAC,cAAA,WADvC,uCAGFF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACZH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMY,MAAlB,oBAA0CZ,EAAMa,SAAhD,eCNMC,MAJf,SAAiBd,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BJ,EAAMe,kBCwG3CC,cArGb,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAURwB,QAAU,SAAAC,GAMR,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GA5BUR,EAiCnBP,cAAgB,SAAAJ,GAEd2B,QAAQC,IAAI,wBAEZ,IAAIC,EAAelB,EAAKmB,MAAMC,WAAWC,OACvC,SAAA9B,GAAK,OAAIA,EAAMF,KAAOA,IACtB,GAEEiC,EAAmBtB,EAAKmB,MAAMC,WAAWC,OAAO,SAAA9B,GAAK,OAAsB,IAAlBA,EAAMgC,UACnEP,QAAQC,IAAIC,GAGPA,EAAaK,SA2BdP,QAAQC,IAAIK,GACZA,EAAiBE,QAAQ,SAAAjC,GACrBA,EAAMgC,SAAU,IAGpBvB,EAAKyB,SAAS,CACZ9B,MAAO,MAhCXuB,EAAaK,SAAU,EACvBvB,EAAKO,QAAQa,GACbJ,QAAQC,IAAI,2BAA4BG,GAGxCpB,EAAKyB,SAAS,CACZ9B,MAAOK,EAAKmB,MAAMxB,MAAQ,EAC1BC,SACEI,EAAKmB,MAAMxB,MAAQ,EAAIK,EAAKmB,MAAMvB,SAC9BI,EAAKmB,MAAMxB,MAAQ,EACnBK,EAAKmB,MAAMvB,WAInBoB,QAAQC,IAAIjB,EAAKmB,MAAMxB,OACC,KAArBK,EAAKmB,MAAMxB,QACVK,EAAKyB,SAAS,CACV9B,MAAO,IAGV2B,EAAiBE,QAAQ,SAAAjC,GACvBA,EAAMgC,SAAU,OAjEzBvB,EAAKmB,MAAQ,CACXC,aACAzB,MAAO,EACPC,SAAU,GAGZI,EAAKP,cAAgBO,EAAKP,cAAciC,KAAnBzB,OAAA0B,EAAA,EAAA1B,CAAAD,IARJA,wEAmFV,IAAA4B,EAAAzB,KACP,OACEnB,EAAAC,EAAAC,cAAC2C,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAQnC,MAAOQ,KAAKgB,MAAMxB,MAAOC,SAAUO,KAAKgB,MAAMvB,WACrDO,KAAKgB,MAAMC,WAAWW,IAAI,SAAAxC,GAAK,OAChCP,EAAAC,EAAAC,cAAC8C,EAAD,CACI3C,GAAIE,EAAMF,GACV4C,IAAK1C,EAAMF,GACXE,MAAOA,EAAMA,MACbgC,QAASK,EAAKM,eACdzC,cAAemC,EAAKnC,0BA9Fd0C,mBCDlBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.5dca80b1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction ImageCard(props){\r\nreturn (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"card rounded\">\r\n          <div className=\"img-container\">\r\n            <img\r\n              alt={\"This is image \" + props.id}\r\n              src={props.image}\r\n              onClick= {() => props.handleClicked(props.id)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default ImageCard","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"jumbotron\">\r\n        <h1 className=\"display-4\">React Memory Image Game</h1>\r\n        <p className=\"lead\">\r\n          <em>Click on an image to start the game and earn points, but click on the\r\n          same image twice and the game is over. <br/> Keep trying to get all 12 images!</em>\r\n        </p>\r\n        <p className=\"score-board\">\r\n         <b> Score: {props.score}   |   TopScore: {props.topScore} </b>\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"container-flex wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper","import React, { Component } from \"react\";\r\nimport ImageCard from \"./components/ImageCard\";\r\nimport Header from \"./components/Header\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport imageCards from \"./imageCards.json\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imageCards,\r\n      score: 0,\r\n      topScore: 0\r\n    };\r\n    //binding event handler to this\r\n    this.handleClicked = this.handleClicked.bind(this);\r\n  }\r\n\r\n  shuffle = array => {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  // method to check the clicked image\r\n  //pass through the current prop.id\r\n  handleClicked = id => {\r\n    // console.log(score, topScore);\r\n    console.log(\"I have been clicked!\");\r\n    //going through JSON to find the information that matched the current id using 0 to grab only that information\r\n    let clickedImage = this.state.imageCards.filter(\r\n      image => image.id === id\r\n    )[0];\r\n    //grabs all objects in JSON with clicked = true\r\n    let allClickedImages = this.state.imageCards.filter(image => image.clicked === true);\r\n    console.log(clickedImage);\r\n\r\n    //check if image has been clicked first time and set clicked to false\r\n    if (!clickedImage.clicked) {\r\n      clickedImage.clicked = true;\r\n      this.shuffle(imageCards);\r\n      console.log(\" this is after shuffle: \", imageCards);\r\n\r\n      //updating score and topscore as user plays\r\n      this.setState({\r\n        score: this.state.score + 1,\r\n        topScore:\r\n          this.state.score + 1 > this.state.topScore\r\n            ? this.state.score + 1\r\n            : this.state.topScore\r\n      });\r\n\r\n      //if player has clicked all 12 images once set score back to 0 and reset game\r\n      console.log(this.state.score);\r\n      if(this.state.score === 11){\r\n          this.setState({\r\n              score: 0,\r\n          })\r\n\r\n           allClickedImages.forEach(image => {\r\n             image.clicked = false;\r\n           });\r\n      }\r\n      //if image has been clicked twice set all image's clicked back to false and score to 0\r\n    } else {\r\n        console.log(allClickedImages);\r\n        allClickedImages.forEach(image => {\r\n            image.clicked = false;\r\n        });\r\n        // console.log(\"This is after all turned false: \", imageCards);\r\n        this.setState({\r\n          score: 0,\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Header score={this.state.score} topScore={this.state.topScore} />\r\n        {this.state.imageCards.map(image => (\r\n        <ImageCard\r\n            id={image.id}\r\n            key={image.id}\r\n            image={image.image}\r\n            clicked={this.checkifClicked}\r\n            handleClicked={this.handleClicked}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}